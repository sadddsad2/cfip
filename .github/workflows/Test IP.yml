name: Test IP Connectivity and Create Release

on:
  schedule:
    - cron: '0 19 * * *'  # 每天北京时间凌晨3点运行 (UTC 19:00 = 北京时间 03:00)
  workflow_dispatch:  # 允许手动触发
  push:
    branches:
      - main
    paths:
      - '.github/workflows/ip-test.yml'
      - 'api.txt'
      - 'test_ip.py'

# 添加必要的权限
permissions:
  contents: write  # 允许创建 Release 和上传文件
  actions: read

jobs:
  test-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install requests aiohttp asyncio dnspython beautifulsoup4 lxml

    - name: Verify api.txt exists
      run: |
        if [ ! -f api.txt ]; then
          echo "❌ api.txt 文件不存在，正在创建示例文件..."
          cat > api.txt << 'APIEOF'
        # API 列表配置文件
        # 每行一个 API 地址，# 开头的行为注释
        # 
        # CloudFlare IP 优选 API
        https://raw.githubusercontent.com/ymyuuu/IPDB/refs/heads/main/bestproxy.txt
        https://raw.githubusercontent.com/ymyuuu/IPDB/refs/heads/main/bestcf.txt
        https://ip.164746.xyz/ipTop10.html
        https://raw.githubusercontent.com/ZhiXuanWang/cf-speed-dns/refs/heads/main/ipTop10.html
        https://vps789.com/public/sum/cfIpApi
        # https://www.wetest.vip/api/cf2dns/get_cloudflare_ip&type=v4&key=o1zrmHAF
        https://raw.githubusercontent.com/cmliu/WorkerVless2sub/main/addressesapi.txt
        https://addressesapi.090227.xyz/CloudFlareYes
        https://addressesapi.090227.xyz/ip.164746.xyz
        APIEOF
          echo "✅ 已创建示例 api.txt 文件"
        fi
        echo "📋 API 列表内容："
        cat api.txt

    - name: Run IP connectivity test
      run: |
        python test_ip.py

    - name: Check if ip.txt exists and has valid data
      id: check_file
      run: |
        if [ -f ip.txt ]; then
          # 检查文件是否有实际的IP数据（排除注释行）
          valid_lines=$(grep -v '^#' ip.txt | grep -E '^\s*[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | wc -l)
          
          if [ "$valid_lines" -gt 0 ]; then
            echo "file_exists=true" >> $GITHUB_OUTPUT
            echo "✅ ip.txt 文件已生成，包含 $valid_lines 个有效 IP"
            echo "ip_count=$valid_lines" >> $GITHUB_OUTPUT
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️  ip.txt 文件已生成，但没有有效的 IP 数据"
            echo "ip_count=0" >> $GITHUB_OUTPUT
          fi
          
          echo "📄 文件内容预览:"
          head -n 30 ip.txt
        else
          echo "file_exists=false" >> $GITHUB_OUTPUT
          echo "ip_count=0" >> $GITHUB_OUTPUT
          echo "❌ ip.txt 文件未生成"
        fi

    - name: Create Release
      if: steps.check_file.outputs.file_exists == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}-${{ github.run_id }}
        name: IP List ${{ github.run_number }} - ${{ steps.check_file.outputs.ip_count }} IPs (三网全通)
        body: |
          ## 📋 IP 三网连通性测试结果
          
          **测试时间:** `${{ github.event.repository.updated_at }}`  
          **运行编号:** #${{ github.run_number }}  
          **三网全通 IP:** ${{ steps.check_file.outputs.ip_count }} 个
          
          ### 📊 测试说明
          - ✅ 所有 IP 均通过中国三大运营商连通性测试
          - 🌐 **中国电信** ✓ | **中国联通** ✓ | **中国移动** ✓
          - 📍 包含详细地理位置信息（国家-城市/地区）
          - 📝 格式: `IP:端口#国家-地区`
          - 🔄 每天北京时间凌晨 3 点自动更新
          
          ### 🎯 质量保证
          - 只保留**三网全通**的 IP 地址
          - 每个 IP 都经过电信、联通、移动网络验证
          - 确保全国用户都能正常访问
          
          ### 📥 使用方法
          1. 下载 `ip.txt` 文件
          2. 按照格式使用其中的 IP 地址
          3. 每个 IP 都已验证可连接
          
          ### ⚙️ API 来源
          IP 数据来自 `api.txt` 文件中配置的 API 接口
          
          ---
          *此 Release 由 GitHub Actions 自动生成 🤖*
        files: |
          ip.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Keep only latest 5 releases
      if: steps.check_file.outputs.file_exists == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const sortedReleases = releases.data.sort((a, b) => 
            new Date(b.created_at) - new Date(a.created_at)
          );
          
          console.log(`Found ${sortedReleases.length} releases`);
          
          if (sortedReleases.length > 5) {
            for (let i = 5; i < sortedReleases.length; i++) {
              console.log(`Deleting release: ${sortedReleases[i].name} (${sortedReleases[i].tag_name})`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: sortedReleases[i].id
              });
              
              // 同时删除对应的 tag
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${sortedReleases[i].tag_name}`
                });
                console.log(`Deleted tag: ${sortedReleases[i].tag_name}`);
              } catch (error) {
                console.log(`Could not delete tag: ${sortedReleases[i].tag_name}`);
              }
            }
            console.log(`✅ Cleaned up ${sortedReleases.length - 5} old releases`);
          } else {
            console.log('✅ No cleanup needed');
          }
